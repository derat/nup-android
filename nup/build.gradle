// Module-specific build file.

// https://stackoverflow.com/a/42158020/6882947
plugins {
  id 'com.android.application'
  id 'kotlin-android'
}

android {
  defaultConfig {
    applicationId 'org.erat.nup'
    versionCode 1
    versionName '1.0'

    // https://developer.android.com/guide/topics/manifest/uses-sdk-element:
    // "[targetSdkVersion] informs the system that you have tested against the
    // target version and the system should not enable any compatibility
    // behaviors to maintain your app's forward-compatibility with the target
    // version. The application is still able to run on older versions (down to
    // minSdkVersion)."
    minSdkVersion 22    // Android 5.1 (Lollipop, Nov. 2014 -- Fire HD 8 2017)
    targetSdkVersion 31 // Android 12 (Oct. 2021)
  }

  compileSdkVersion 31
  buildToolsVersion '30.0.3'

  dexOptions {
    preDexLibraries true
  }

  buildTypes {
    debug {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  kotlinOptions {
    // Avoid a build warning about PlaybackReporterTest's use of
    // @OptIn(kotlinx.coroutines.ExperimentalCoroutinesApi::class).
    freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'

    // Avoid the following error from doAfterTextChanged in SearchFormActivity:
    //   Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM
    //   target 1.6. Please specify proper '-jvm-target' option
    // https://stackoverflow.com/a/56996020/6882947
    jvmTarget = JavaVersion.VERSION_1_8.toString()
  }

  testOptions {
    // http://g.co/androidstudio/not-mocked (because why would anyone ever want
    // to call Log.d from code that's being tested?)
    unitTests.returnDefaultValues = true
  }

  // Avoid "package android.test.mock does not exist" errors:
  // https://developer.android.com/training/testing/set-up-project
  useLibrary 'android.test.mock'
}

dependencies {
  // https://developer.android.com/jetpack/androidx/versions
  implementation 'androidx.core:core-ktx:1.3.2'
  implementation 'androidx.preference:preference-ktx:1.1.1'
  implementation 'androidx.media:media:1.4.3' // sigh, no Kotlin version?

  // https://developers.google.com/android/guides/setup
  implementation 'com.google.android.material:material:1.3.0'

  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"

  testImplementation 'com.google.guava:guava:23.0'
  testImplementation 'com.google.truth:truth:1.1.2'
  testImplementation 'junit:junit:4.12'
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutines_version"
  testImplementation 'org.mockito:mockito-inline:2.23.4'
}

// Generate gen_preset*.xml drawables with different gradient colors.
// Based on https://stackoverflow.com/a/34888938.
task presetDrawables {
  [
    ['#ff00cc', '#333399'],
    ['#4ecdc4', '#556270'],
    ['#fcb045', '#833ab4'],
    ['#fdb99b', '#a770ef'],
    ['#89253e', '#3a6186'],
    ['#ffff1c', '#00c3ff'],
  ].eachWithIndex { colors, i ->
    copy {
      def dest = "gen_preset${i+1}.xml"
      println("Generating ${dest}")
      from 'src/main/res/raw'
      into 'src/main/res/drawable'
      include 'preset_template.xml'
      rename('preset_template.xml', dest)
      expand(color1: "${colors[0]}", color2: "${colors[1]}")
    }
  }
}
preBuild.dependsOn presetDrawables
